#!/usr/bin/env python

import os
import argparse
import re
import subprocess
import multiprocessing as multi
import shutil

os.environ["OMP_NUM_THREADS"] = "1"

parser = argparse.ArgumentParser()
parser.add_argument("--input_dir", type=str, default="Data", help="")
parser.add_argument("--train_steps", type=int, default=25000,
                    help="number of training steps")
parser.add_argument("--file_ext", type=str, default=".png",
                    help="file extension of the image files used for training")
parser.add_argument("--models_dir", type=str, default="/home/reul/Documents/Projects/ocropus_mptv/pretraining/models",
                    help="directory with the available mixed models")
parser.add_argument("--whitelist", type=str,
                    default="/home/reul/Documents/Projects/ocropus_mptv/pretraining/whitelist.txt",
                    help="list of characters which won't be deleted from the codec")
parser.add_argument("--models", type=str, default="LH,LH,FRK,ENG,ENG",
                    help="pretrained models to be matched to the training folds")

args = parser.parse_args()
dir_re = re.compile("[0-9]+")

models_to_load = args.models.split(",")
args.models_dir = os.path.expanduser(args.models_dir)

input_dir = args.input_dir
folds_dir = os.path.join(input_dir, "Folds")
output_dir = os.path.join(input_dir, "Models")

assert(os.path.exists(args.models_dir))
assert(not os.path.exists(output_dir))

#check models
for model_id in models_to_load:
    if not model_id == "":
        assert(os.path.exists(os.path.join(args.models_dir, model_id + ".pyrnn.gz")))

folds = []

#check line dirs
for d in sorted(os.listdir(folds_dir)):
    assert(dir_re.match(d))
    d = os.path.join(folds_dir, d)
    assert(os.path.isdir(d))
    folds.append(d)

assert(len(models_to_load) == len(folds))


def mkdir(path):
    if not os.path.exists(path):
        os.makedirs(path)


train_lines = []
output_model_dirs = []

for f in sorted(folds):
    output_model_dir = os.path.join(output_dir, os.path.basename(f))
    output_model_dirs.append(output_model_dir)
    mkdir(output_model_dir)

    train_folds = folds[:]
    train_folds.remove(f)
    lines = []

    for f_train in train_folds:
        lines.extend([os.path.join(f_train, l) for l in os.listdir(f_train) if l.endswith(args.file_ext)])

    train_lines.append(lines)

assert(len(models_to_load) == len(train_lines) == len(output_model_dirs))


def run_single(params):
    lines, model, output_model_dir = params


    call = ["ocropus-rtrain", "-c", os.path.join(folds_dir, "*", "*.gt.txt"),] \
            + ([] if len(model) == 0 else ["--load", os.path.join(args.models_dir, model + ".pyrnn.gz"),]) \
            + ["-o", output_model_dir + "/", "--start", "0", "-N", str(args.train_steps)]
    print(call, "lines")

    subprocess.call(call + lines)

p = multi.Pool(len(train_lines))
p.map(run_single, zip(train_lines, models_to_load, output_model_dirs))